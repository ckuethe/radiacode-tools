#!/usr/bin/env python3
# coding: utf-8
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4 syn=python
# Author: Chris Kuethe <chris.kuethe@gmail.com> , https://github.com/ckuethe/radiacode-tools
# SPDX-License-Identifier: MIT

import os
from argparse import ArgumentParser, Namespace
from uuid import UUID

from radiacode_tools.rc_files import RcN42, RcSpectrum


def get_args() -> Namespace:
    ap = ArgumentParser()

    def _uuid(s) -> UUID | None:
        if s.strip():
            return UUID(s)
        return None

    ap.add_argument(
        "-i",
        "--input",
        type=str,
        metavar="NAME",
        required=True,
        help="primary source data file",
    )
    ap.add_argument(
        "-b",
        "--background",
        type=str,
        metavar="NAME",
        help="Retrieve background from this file, using the background series if it exists or the main series otherwise.",
    )
    mtx = ap.add_mutually_exclusive_group()
    mtx.add_argument(
        "-o",
        "--output",
        type=str,
        metavar="NAME",
        help="[<foreground>.n42]",
    )
    mtx.add_argument(
        "-r",
        "--recursive",
        default=False,
        action="store_true",
        help="if given, treat the input path as a directory to process recursively with autogenerated output names",
    )
    ap.add_argument(
        "--overwrite",
        default=False,
        action="store_true",
        help="allow existing file to be overwritten",
    )
    ap.add_argument(
        "-u",
        "--uuid",
        metavar="UUID",
        type=_uuid,
        help="specify a UUID for the generated document. [<random>]",
    )
    return ap.parse_args()


def process_single_file(fg_file=None, bg_file=None, out_file=None, uuid=None, overwrite=False) -> bool:
    "Read a data file and convert it"
    if out_file and os.path.exists(out_file) and overwrite is False:
        print(f"Not overwriting {out_file}")
        return False  # shortcut for recursive mode

    fg_spec = RcSpectrum(fg_file)
    bg_spec = RcSpectrum(bg_file)
    n42 = RcN42()
    n42.spectrum_data.fg_spectrum = fg_spec.fg_spectrum
    if bg_spec.bg_spectrum:
        # if a background spectrum file has been provided,
        # first try its background layer as the background
        n42.spectrum_data.bg_spectrum = bg_spec.bg_spectrum
    elif bg_spec.fg_spectrum:
        # if a background spectrum file has been provided, but it
        # doesn't have a background layer, use its foreground layer
        n42.spectrum_data.bg_spectrum = bg_spec.bg_spectrum
    elif fg_spec.bg_spectrum:
        # if an explicit background has not been provided
        # use the one provided by the foreground data file.
        n42.spectrum_data.bg_spectrum = fg_spec.bg_spectrum

    if out_file is None:
        out_file = f"{fg_file}.n42"

    # file deepcode ignore PT: CLI tool intentionally opening the files the user asked for
    n42.write_file(out_file)
    return True


def main() -> None:
    args = get_args()

    if args.recursive:
        for cur_dir, _, files in os.walk(args.input):
            for fn in files:
                if fn.endswith(".xml"):
                    src_file = os.path.join(cur_dir, fn)
                    process_single_file(fg_file=src_file, out_file=f"{src_file}.n42")
    else:
        process_single_file(
            fg_file=args.input,
            bg_file=args.background,
            out_file=args.output,
            uuid=args.uuid,
            overwrite=args.overwrite,
        )


if __name__ == "__main__":
    main()
